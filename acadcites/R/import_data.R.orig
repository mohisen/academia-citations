# Functions for importing and combining citation and journal data.

#' Import and combine paper citations, paper downloads, and journal information.
#'
#' @param cites_path A path to a file with paper citation data for papers both
#' on and off Academia,
#' @param journals_path A path to a file with data on academic journals.
#' @param doc_types_path A path to a file with document categorization
#' results (Original Research, Commentary/Editorial, etc.)
#' @param impact_factor_dir A path to a *directory* containing impact factor
#' tables from SciMago journal rankings.
#' @param no_conflict_id_path A path to a file with a list of article ids with
#' no search conflicts.
#' @param ... Other arguments to import and join functions.
#'
#' @return A dataframe of citation, download, and journal data merged together.
#'
importData <- function(cites_path=NULL, journals_path=NULL, doc_types_path=NULL,
                      impact_factor_dir=NULL, no_conflict_id_path=NULL,
                      only_complete=TRUE, only_original=TRUE, ...) {

    if (is.null(cites_path)) {
        cites_path <- system.file('extdata', 'papers.csv.gz',
                                 package='acadcites')
    }
    if (is.null(journals_path)) {
        journals_path <- system.file('extdata', 'era_2012_journal_list.csv.gz',
                                    package='acadcites')
    }

    if (is.null(doc_types_path)) {
        doc_types_path <- system.file('extdata', 'mt_doc_types.csv.gz',
                                     package='acadcites')
    }

    if (is.null(impact_factor_dir)) {
        impact_factor_dir <- system.file('extdata', 'impact_factors',
                                        package='acadcites')
    }

    if (is.null(no_conflict_id_path)) {
        no_conflict_id_path <- system.file('extdata', 'no_conflict_be_cf_ids.csv',
                                           package='acadcites')
    }

    cat('Importing article citations ...\n')
    cites <- importCitesFile(cites_path, ...)
    cat('Importing journal information ...\n')
    journals <- importEraFile(journals_path, ...)
    cat('Importing document types ...\n')
    doc_types <- importDocTypes(doc_types_path, ...)
    cat('Importing impact factors ...\n')
    impact_factors <- importImpactFactors(impact_factor_dir, ...)

    no_conflict_ids <- importNoConflictIds(no_conflict_id_path)

    cites %>% joinCitesJournals(journals, ...) %>%
        joinCitesDocTypes(doc_types, ...) %>%
        joinCitesImpactFactor(journals, impact_factors, ...) %>%
        joinMissingImpactFactorsByTitle(impact_factors, ...) %>%
        filter(be_cf_id %in% no_conflict_ids)
}


#' Estimate the age of a paper in years.
#'
#' Since we only have data on publication year, we approximate an article's
#' publication date as June 30 of its publication year.
#'
#' @param date_collected A Date vector of dates when the articles citations
#' were recorded.
#' @param published_year An integer vector of articles' publication years.
#'
#' @return A numeric vector of years between publication and citation
#' collection for each article.
#'
#' @examples
#' colln_dates = as.Date(c('2014-06-19', '2014-05-18', '2014-07-03'))
#' pub_years = c(2010, 2011, 2012)
#' paperAgeYears(colln_dates, pub_years)
#'
paperAgeYears <- function(date_collected, published_year) {
    pubdate <- as.Date(paste0(published_year, '-06-30'))
    as.numeric(date_collected - pubdate) / 365.25
}

# Identify papers where year of publication = year of upload.
isUploadedWhenPublished <- function(date_uploaded, published_year) {
    du = as.Date(date_uploaded)
    as.numeric(format(du,'%Y')) == published_year
}


# Import the article citations data.
importCitesFile <- function(cites_path, online_cutoff=0, only_complete=TRUE, ...) {
    cites <- read.csv(cites_path, header=TRUE, as.is=TRUE) %>%
        mutate(source = ifelse(on_set == 't', 'on', 'off'),
               on_acad = as.integer(source=='on'),
               date_collected = as.Date(date_collected),
               uploaded_at = ifelse(uploaded_at == "", NA, uploaded_at),
               u_eq_p = isUploadedWhenPublished(uploaded_at, year),
               age = paperAgeYears(date_collected, year),
               online = as.integer(avail_online_score > online_cutoff))  %>%
        select(-on_set, -uploaded_at)

    cites <- cites %>% filter(source == 'off' | (source == 'on' & u_eq_p))

    if (only_complete) {
        cites <- cites %>% filter(!is.na(age) & !is.na(avail_online_score))
    }
    cites
}


# Import journal data from the Excellence in Research for Australia (ERA)
# initiative.
importEraFile <- function(era_path, ...) {
    df <- read.csv(era_path, colClasses='character', header=TRUE, as.is=TRUE)
    names(df) <- c('era_id', 'journal_title', 'foreign_title',
                  'for1', 'for1_name', 'for2', 'for2_name',
                  'for3', 'for3_name', 'issn1', 'issn2', 'issn3',
                  'issn4', 'issn5', 'issn6', 'issn7')

    issns <- df %>% select(issn1, issn2, issn3, issn4, issn5, issn6, issn7) %>% toSetStr
    topics <- df %>% select(for1_name, for2_name, for3_name) %>%
        mutate_each(funs(str_trim)) %>%
        toSetStr

    # Get the first two digits of a string number.
    # If the string is only length 1, pad w/ a leading 0.
    # '12345' -> '12'
    # '6'     -> '06'
    first2Dig <- function(s) {
        s <- ifelse(nchar(s) == 1, paste0('0', s), s)
        substring(str_trim(s), 1,2)
    }

    # Divisions are the first two digits in the
    # 'Field of Research' code
    divisions <- df %>%
        select(for1, for2, for3) %>%
        mutate_each(funs(first2Dig)) %>%
        toSetStr

    data.frame(journal_title=df$journal_title,
               issns=issns,
               topics=topics,
               divisions=divisions, stringsAsFactors=FALSE)
}


# Import document type results from MT workers and classify
# documents based on agreement amongst workers.
importDocTypes <- function(doc_type_path, min_agreement=3, ...) {
    importMTResults(doc_type_path) %>%
        classifyDocTypes(min_agreement=min_agreement)
}

# Import SCIMago Impact Factor rankings. `if_dir` contains yearly
# data.
importImpactFactors <- function(if_dir, ...) {
    if_files <- list.files(if_dir) %>%
        stringr::str_extract_all('^scimagojr_20[0-9]{2}.csv.gz')

    cleanISSN <- function(issn) {
        issn_clean <- issn %>% as.character %>% stringr::str_replace('^ISSN ', '')
        paste(stringr::str_sub(issn_clean, 1, 4),
               stringr::str_sub(issn_clean, 5), sep='-')
    }
    readImpactFactorFile <- function(fname) {
        fyear <- stringr::str_extract(fname, '20[0-9]{2}') %>% as.integer
        read.csv(file.path(if_dir, fname), header=TRUE, as.is=TRUE) %>%
            select(Title, Type, ISSN, Citable.Docs...3years., Cites...Doc...2years.) %>%
          rename(title=Title, type=Type, issn=ISSN,
                 citable_docs=Citable.Docs...3years.,
                   impact_factor=Cites...Doc...2years.) %>%
          # Year of IF is 1 before year of dataset.
            mutate(year=fyear - 1,
                   issn=cleanISSN(issn))
    }


    # There are duplicate ISSNs in the data. Combine them, aggregating impact factor
    # with a weighted average by citable documents (3 years).
    if_df <- lapply(if_files, readImpactFactorFile) %>% do.call(rbind, .) %>%
        group_by(issn, year) %>%
        summarize(title=first(title),
                  impact_factor=sum(citable_docs * impact_factor)/sum(citable_docs))
    if_df <- left_join(if_df %>% select(-title),
                      if_df %>% group_by(issn) %>% summarize(title=first(title)),
                      by='issn')
    if_df %>% interpolateMissingImpactFactorYears
}


interpolateMissingImpactFactorYears <- function(impact_factor_df) {
  if_wide <- impact_factor_df %>% reshape2::dcast(issn + title ~ year,
                                            value.var='impact_factor')
  names(if_wide) <- c('issn', 'title', 'y2009', 'y2010', 'y2011', 'y2012')
  if_wide %>% mutate(y2009=ifelse(!is.na(y2009),
                                y2009,
                                ifelse(!is.na(y2010),
                                       y2010,
                                       ifelse(!is.na(y2011),
                                              y2011,
                                              y2012))),
                   y2010=ifelse(!is.na(y2010), y2010, y2009),
                   y2011=ifelse(!is.na(y2011), y2011, y2010),
                   y2012=ifelse(!is.na(y2012), y2012, y2011)) %>%
      reshape2::melt(value.name='impact_factor', variable.name='year',
                     id.vars=c('issn', 'title')) %>%
      mutate(year=as.integer(stringr::str_replace(year, '^y', '')))
}


# Some articles had conflicting matches in the Google Scholar search
# (e.g. multiple GS matches on title, but not certain to be the same
# article.) We exclude these. This file list those with NO conflict
importNoConflictIds <- function(no_conflict_path) {
  read.csv(no_conflict_path)$be_cf_id
}

# A journal is a single row, with multiple ISSN values.
# Melt to multiple rows, one for each ISSN (with other
# journal data duplicated). Need single, unique ISSN values
# in table to merge w/ citations.
meltJournalsOnIssn <- function(journals_df) {
    meltOnSets(journals_df, 'issns', prefix='issn')
}


# Join articles to their journals.
joinCitesJournals <- function(cites_df, journals_df, ...) {
    melted_journals <- meltJournalsOnIssn(journals_df)
    left_join(cites_df,
              melted_journals %>% select(journal_title, issn, topics, divisions),
              by='issn')

}

# Journals in the papers data may be id'd with alternative ISSNs than
# those in the impact factor data. The ERA data typically contains all
# ISSNs available for a journal. This makes a 'crosswalk' that identifies
# all the same-journal ISSNs associated w/ an ISSN in the impact factor data.
makeIssnImpactFactorCrosswalk <- function(journals_df, if_df) {
  js_df <- meltJournalsOnIssn(journals_df) %>%
      select(journal_title, issn)

  # Get a journal name -> impact factor ISSN mapping
  js_if_df <- left_join(js_df, if_df %>% select(issn) %>% mutate(if_issn = issn), by='issn') %>%
      group_by(journal_title) %>%
      summarize(impact_factor_issn = if_issn[!is.na(if_issn)][1])

  # Join that back to the journals, so an impact factor ISSN is
  # mapped to all ISSNs within that journal name.
  left_join(js_df, js_if_df, by = 'journal_title') %>%
      select(issn, journal_title, impact_factor_issn)
}

# Joint doc type classifications to other article data by internal id.
joinCitesDocTypes <- function(cites_df, classifications_df, only_original=TRUE, ...) {
    df <- left_join(cites_df, classifications_df, by='be_cf_id')
    if (only_original) {
        df %>% filter(document_type == 'Original Research')
    } else {
        df
    }
}

joinCitesImpactFactor <- function(cites_df, journals_df, if_df, ...) {
  issn_cw <- makeIssnImpactFactorCrosswalk(journals_df, if_df)
  left_join(cites_df %>% rename(impact_factor_2012=impact_factor),
            issn_cw %>% select(-journal_title), by='issn') %>%
      left_join(if_df %>%
                select(issn, year, impact_factor) %>%
                rename(impact_factor_issn = issn),
                by=c('impact_factor_issn', 'year'))
}

joinMissingImpactFactorsByTitle <- function(cites_df, if_df, ...) {
    cleanTitles <- function(titles) {
      titles %>%
<<<<<<< HEAD
        stringr::str_to_lower() %>%
=======
        (stringr::str_to_lower) %>%
>>>>>>> 5f1999710ae546081a7d541d720dae655664093a
        stringr::str_replace_all('-', '') %>%
        stringr::str_replace_all('\\b(series|section) [0-9a-z]{1}\\b', '') %>%
        stringr::str_replace_all('\\(.*\\)', '') %>%
        stringr::str_replace_all('\\s:\\s', ':') %>%
        stringr::str_replace_all('\\s+', ' ') %>%
        stringr::str_trim()
        }

    shortTitles <- function(titles) {
      stringr::str_replace(titles, ':.*', '')
    }


    # Make normalized titles for joining on.
    cites_df <- cites_df %>% mutate(clean_title=cleanTitles(journal_title),
                                 short_title=shortTitles(clean_title))

    # Normalize the journal titles in the impact factor data
    if_titles <- if_df %>%
      mutate(clean_title=cleanTitles(title)) %>%
      group_by(clean_title) %>%
      summarize(issn=first(issn)) %>%
      mutate(short_title=shortTitles(clean_title))

    cites_no_issn <- cites_df %>%
        filter(is.na(impact_factor_issn)) %>%
        select(-impact_factor)

    # Ensure that cleaning the titles doesn't create dupes in the set we're trying to match on.
    # If this throws an error, this will have to be modified to unify dupes in some way.
    clean_title_matches = if_titles %>%
        filter(clean_title %in% cites_no_issn$clean_title) %>%
        `$`(clean_title)
    if (length(clean_title_matches) != length(clean_title_matches %>% unique)) {
      stop("Clean titles not unique.")
    }

    short_title_matches = if_titles %>%
        filter(short_title %in% cites_no_issn$short_title) %>%
        `$`(short_title)
    if (length(short_title_matches) != length(short_title_matches %>% unique)) {
      short_title_counts <- short_title_matches %>% table
      short_title_dups <- short_title_counts[short_title_counts > 1]
      print(short_title_dups)
      stop("Short titles not unique.")
    }

    # Join on the 'clean' titles.
    cites_no_issn <- left_join(cites_no_issn,
                              if_titles %>%
                                  select(clean_title, issn) %>%
                                  rename(if_issn_title=issn),
                              by='clean_title')

    # Join on the short titles and coalesce the data.
    cites_no_issn <- left_join(cites_no_issn,
                              if_titles %>%
                                  select(short_title, issn) %>%
                                  rename(if_issn_short=issn),
                              by='short_title') %>%
        mutate(impact_factor_issn=ifelse(!is.na(if_issn_title),
                                         if_issn_title,
                                         if_issn_short)) %>%
        select(-if_issn_title, -if_issn_short) %>%
        left_join(if_df %>% select(issn, year, impact_factor) %>%
                  rename(impact_factor_issn=issn),
                  by=c('impact_factor_issn', 'year'))
    # Coalesce the data.
    rbind(cites_df %>% filter(!is.na(impact_factor_issn)), cites_no_issn) %>%
        select(-clean_title, -short_title)
}
